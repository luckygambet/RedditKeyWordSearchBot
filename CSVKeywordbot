import re
import time
import datetime
import praw
import csv

#THIS SCRIPT WILL SEARCH SUBREDDITS
#FOR KEYWORDS AND COUNT HOW MUCH TIME THEY APPEAR
#THEN SAVE THAT DATA TO A CSV FILE WITH 
#APPEARENCES SEPERRATED BY DAYS


#EXAMPLE TABLE
##------------------------------------------------------------#
#| WORD | APPEARENCES |    DATE    | APPEARENCES |    DATE    |     
#|------------------------------------------------------------|
#| AMC  |      10     | 2/24/2021  |      13     | 2/25/2021  |
#|------------------------------------------------------------|
#| GME  |      5      | 2/24/2021  |      10     | 2/25/2021  |
#|------------------------------------------------------------|
#| LNK  |      1      | 2/24/2021  |             |            |
##------------------------------------------------------------#


#---------------------------------/setup/---------------------------------------


reddit = praw.Reddit(client_id     =   "",
                     client_secret =   "",
                     user_agent    =   "",
                     username      =   "",
                     password      =   "")


SUBREDDIT_TARGETS = ["personalfinance"]

WORDS = []
                                            
CSV_FILE_NAME = "nasdaq_screener_1614053192716.csv"         #want to load in a set of words?
CSV_COL = 0                                                 #just change these to match
                                                            #example
                                                            #"nasdaq_screener_1614053192716.csv"
                                                            #0  | COL 1 START AT ZERO
                                                            #will load in NASDAQ CSV file

REGEX_MATCH_STR = "[.| |,|s|?]"                             #Will match " {WORD}"+ any of these(. ,s?)

CASE_SENSITIVE_MATCH = True                                 #if this is true it will match
                                                            #words as defined in WORDS
                                                            #if this is false it will match
                                                            #UPPERCASE to UPPERCASE
                                                            #and turn everything else into lowercase
                                                            #including the post and match 


POST_TIME_LIMIT = (datetime.datetime.today()                
            - datetime.timedelta(days=1))                   #will only match post within
                                                            #24 hours of posting
                                                            #can be swapped with these keywords
                                                            #days #seconds
                                                            #microseconds #milliseconds
                                                            #minute #hours
                                                            #weeks

SUBREDDIT_SEARCH_LIMIT = 100                                #sorts by hot

APPEARANCE_LIMIT = 1                                        #if the word has appeared less then x times
                                                            #it wont be included in the file


#60 * 60 * 24 = 86400 secs == 1 day
TIME_BETWEEN_SCANS = (60*60)*24                             #in seconds
                                                            #time to wait before scaning SUBREDDIT_TARGETS
                                        


#---------------------------------/setup/---------------------------------------

class word_search():
    def __init__(self, inWord):
        self.Appearences = 0
        self.SWord = inWord
        self.AppearenceLocations = []

    def __lt__(self, other):  # less then overload
        return self.Appearences < other.Appearences

class cvsSaverHelper():
    def __init__(self,UTC_TimeStamp,Word):
        self.SWord = Word
        self.DATE = None
        self.APPEAR = 0
        if UTC_TimeStamp:
            self.UTC_To_Day(UTC_TimeStamp)
    def UTC_To_Day(self,UTC_TimeStamp):
        DAY = datetime.datetime.utcfromtimestamp(UTC_TimeStamp)#get date is was found
        self.DATE = DAY.replace(hour=0,minute=0,second=0,microsecond=0)#setup var for only days
    def __eq__(self,other):
        return self.DATE == other.DATE
    def __lt__(self,other):
        return self.DATE < other.DATE

def SaveDataToCSV(word_searchArray):
    """
        will take an array of word_search class
        and save it to a csv sheet

        RETURNS ARRAY OF STRINGS

    """
    
    ##seperate the appearences depending on the day it was posted
    RETURN_ARRAY = []#ALL WORDS PLUS APPEARENCES SEPRATED BY DATE
    for word in word_searchArray:
        TMP_APPEND_DATE_ARRAY = []#ALL APPEARENCES SEPRATED BY DATE PER WORD
        if word.Appearences < APPEARANCE_LIMIT:#check the appearence limit
            continue
        if word.Appearences == 0:#if there are no appearences add it to the array
            HelperClass = cvsSaverHelper(None, word.SWord)#with no appearences
            TMP_APPEND_DATE_ARRAY.append(HelperClass)
        for appearance in word.AppearenceLocations:#GO THROUGH ALL THE APPEARENCES
                                                   #GET THE DATE AND IF IT APPEARED BEFORE
            HelperClass = cvsSaverHelper(appearance.created_utc,word.SWord)
            if HelperClass not in TMP_APPEND_DATE_ARRAY:#add a new day it was found and
                HelperClass.APPEAR += 1                 #update the appearences
                TMP_APPEND_DATE_ARRAY.append(HelperClass)#add it to the MAIN_WORD_CLASS
            else:#update the appearences on the day it was found
                TMP_APPEND_DATE_ARRAY[TMP_APPEND_DATE_ARRAY.index(HelperClass)].APPEAR += 1
        RETURN_ARRAY.append(TMP_APPEND_DATE_ARRAY)

    #sort the array before making the file so we can have a nice output
    for thing in RETURN_ARRAY:
        thing.sort()

    #Get name of the new file
    CVS_NAME = "KEYWORDS" + str(datetime.datetime.utcnow())[:10]+".csv"
    
    with open(CVS_NAME,"w",newline="") as csvFile:
        csvwriter = csv.writer(csvFile)#created writer object
        CSV_WRITE_ROWS = []
        for HelperClass in RETURN_ARRAY:
            tmpWriteRow = [HelperClass[0].SWord]#setup csv rows
            for DAYS in HelperClass:

                if DAYS.APPEAR == 0:#incase you want 0 appearence words in excel
                    tmpWriteRow.append("0")
                    continue              
                else:
                    tmpWriteRow.append(DAYS.APPEAR)#create the excel line
                    tmpWriteRow.append(str(DAYS.DATE)[:-9])
            if len(tmpWriteRow) > 1:
                CSV_WRITE_ROWS.append(tmpWriteRow)#add the array to main array
        csvwriter.writerows(CSV_WRITE_ROWS)#write all rows
    return RETURN_ARRAY

def OpenCSV(FILE,Row):
    """
        will take a STRING as filename
        and int as row to return
        
        return ARRAY of STRINGS
    
    """
    RETURN_ARRAY = []
    with open(FILE) as csvFile:
        CSV_READ = csv.reader(csvFile, delimiter=',')
    
        for row in CSV_READ:
            RETURN_ARRAY.append(row[Row])
    return RETURN_ARRAY

def SearchSubredditForKeyWords():
    """ 
        Will search the target subreddits for keywords
        and count how much times it has appeared
        RETURNS ARRAY OF word_search
    """

    #setup helper classes
    word_searchArray = []
    for word in WORDS:
        t = word_search(word)
        word_searchArray.append(t)

    #get all post containing words we would like to track
    
    for target in SUBREDDIT_TARGETS:  # search target subreddits
        tmpX_SUBMISSION = 0
        # search target subreddits by hot
        for submission in reddit.subreddit(target).hot(limit=SUBREDDIT_SEARCH_LIMIT):
            tmpX_SUBMISSION += 1
            print("Checking submission number : {}".format(tmpX_SUBMISSION))
            for post in submission.comments.list():  # search each comment
                if not hasattr(post, "body"):  # check if comment is real
                    continue
                if post.created_utc < POST_TIME_LIMIT.timestamp():  # if post was not created within
                    continue  # the time limit it will be ignored
                for search in word_searchArray:
                    #check if the 1st and last word it any word we are searching
                    #we need to do this because we are searching for
                    #spaces in front/behind of our word in the next few lines
                    if search.SWord == post.body[0:len(search.SWord)]:
                        search.AppearenceLocations.append(post)
                        search.Appearences += 1
                    elif search.SWord == post.body[-len(search.SWord):len(post.body)]:
                        search.AppearenceLocations.append(post)
                        search.Appearences += 1
                    else:
                        #check if comment contains any word we are searching
                        #will match " {WORD}(. ,S?)"
                        searchResult = []
                        if CASE_SENSITIVE_MATCH == False:#check if word is all uppercase for stock tickers
                            if search.SWord.isupper():  # case INSENSITIVE match
                                searchResult = re.findall(
                                    " "+search.SWord+REGEX_MATCH_STR, post.body)
                            else:  # case INSENSITIVE match
                                searchResult = re.findall(
                                    " "+search.SWord.lower()+REGEX_MATCH_STR, post.body.lower())
                        else:  # case SENSITIVE match
                            searchResult = re.findall(
                                " "+search.SWord+REGEX_MATCH_STR, post.body)

                        if len(searchResult) > 0:  # update the word search if match is found
                            search.AppearenceLocations.append(post)
                            search.Appearences += 1
    return word_searchArray


def GetAndSave():

    word_searchArray = SearchSubredditForKeyWords()

    SaveDataToCSV(word_searchArray)

    return word_searchArray






while True:
    start = time.time()

    if CSV_FILE_NAME != "":
        WORDS = OpenCSV(CSV_FILE_NAME,CSV_COL)
    wordsearchResults = GetAndSave()

    end = time.time()


    print("Took "+str((end-start)/60)+" Mins to complete")

    time.sleep(TIME_BETWEEN_SCANS)
